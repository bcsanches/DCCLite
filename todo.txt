DCCLite
-------
- Implement reboot on emulator

- Better emulator:
	- Make sharpConsole able to start emulator as is
	- Make sharpconsole start emulator using a existing device name (auto generate eprom?)
	- Show it on SharpConsole and remote connect to it.
	- Allow pin states to be set:
		- Set voltage level: LOW or HIGH
		- Do a Pin "click", so voltage invert for a short time (put a time config, like 10ms)
	- On device on sharp console, put a button "emulate":
		- Will run emulator with the correctly EEPROM
		- Generate blank EEPROM if does not exists?
	- On device on sharp console, put a button "block", so Broke drops connection to device and ignore its ip...
	- put a emulator hints field on device config? So initial voltage for pins can be set, like a grounded pin or a pin connected to 5v
		- pin on emulator must have a "externalVoltage" field, a tri state field and when reading, check if the externalVoltage is set, if yes, consider it, otherwise, the internal voltage
		- digitalWrite will never affetct externalVoltage
		- SharpTerminal will be able to set this externalVoltage value

- Change DccDevice decoder structure: expose a DecoderProxy, that is never destroyed.
	- Instead, when a device file changes, reload everything?
		+ This makes everything simpler
		+ Changes are not expected all the time
		+ reload time is minimal
		- Runtime editing is gone...
	- Still on reload plan:
		- first thing: remove dependencies on the "services" folder
		- second: create a DccSystem class, that manages all DccLiteServices
		- Organize system in layers or modules
		- Broker - base layer, if main config changes, restart everything (rarest case)
		- Dcc - hardware layer, if any device changes, reload the device and reload all the shell layer
		- Shell layer: systems that rely on before layers, like: 
			- dispatcher
			- script (remvoe it from sys)
			- loconet
			- terminal
		- Sharp terminal will always reload all when hardware changes
		- Is it worth to really organize those layers? Perhaps:
			- kernel
			- executive
			- shell
	- How sharpterminal will handle the "mutating" objects?
		- Send a object update that will change the internal structure?
	- This will make all code around simple, no need for handling create / destroy events
	- The proxy keeps a reference to the real decoder
	- use a std::variant inside the proxy?
	- decoders may have no device
	- keep decoders type inside the device, do not leak specific decoders code to outside

- SharpTerminal
	- Dashboard
		- Display unregistered arduinos
		- Detect arduino on USB and offer to burn it

- Create SignalLogic
	- new entity, used to control signals.
	- It will refer to a Signal and set its aspects
	- states:
		- danger: signal starts on danger state, runs danger logic, if still in danger, waits for any condition to change
			- if not in danger, stays idle
	- Contains
		- danger / stop logic: list of turnouts, sensors, returns true with in danger.
		- aspects, for example:
			- Clear: contains list of turnouts, sensors, returns true if aspect can be set
			- Slow:  contains list of turnouts, sensors, returns true if aspect can be set

		- When an aspect is set, the signal locks its turnouts and monitor sensors / rouse_sections
			- hint route_section of the expected direction

- TrackSection
	- BlockSection: a block with an entry and exit sensor, no turnouts, simple block for stopping a train

- Make all terminal commands rely on paths instead of a device name

- Lua script failing to reload, seems to be a problem with sections
- Why lua scripts are not notified when devices gets online and state changes during sync? Check routes
- Implement coroutine support on lua scripts?

- update route section to know next section and avoid re-ocupying the block
- it may have a direction set (will be used by signal logic)

- Make a EngineDriver Server, redirect to DCCex Directly and goodbye JMRI

LitePanelSDL
------------

- Handle mouse click and create object on map
- Add scrollbars
- Load / Save

- Replace tile map on toolbar with imgui buttons
- include scroll bars on tile map view
- Create a generic editor, that can be used by SDL and wxWidgets?
	- supports the tiles edits (receive mouse clicks with toolbar info)
	- handles scrolling and rendering
	- toolbar buttons can be generic too

- add imgui open file windows (remove windows dependencies)
- Main application, split between Editor and Runner


- When loading:
	- document infra structure?
	- Settings from last run infrastructure?

	- if no file provided or no previous working project:
		- prompt with new project dialog

	- if previous project on working mode, load editor
	- if previous project on runner mode, load runner


- Requirements:
	- every save, put a copy of previous file on temp with a timestamp
	- allow recovery of previous version from the temp (if exists)


LitePanelWx
-----------

- fix rendering errors

To Explore
----------
- mDNS: https://learn.microsoft.com/en-us/uwp/api/windows.networking.servicediscovery.dnssd?view=winrt-22621&redirectedfrom=MSDN
- mDNS: https://fabiensanglard.net/mdns/
- EngineDriver layer
	- connects directly to DCCex
	- avoids JMRI for running trains
	- reads DEcoderPro custom names for commands and provides it to EngineDriver
	- supports DccLite own routes
	- emulate fuel consumption:
		- config per locomotive
		- handle throttle settings and simulates cosumption
		- refueliing system
- JMRI JSON server
	- can be use to monitor wiThrottle commands
